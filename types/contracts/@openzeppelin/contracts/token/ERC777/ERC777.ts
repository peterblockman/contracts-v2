/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type AuthorizedOperator = ContractEventLog<{
  operator: string;
  tokenHolder: string;
  0: string;
  1: string;
}>;
export type Burned = ContractEventLog<{
  operator: string;
  from: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Minted = ContractEventLog<{
  operator: string;
  to: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type RevokedOperator = ContractEventLog<{
  operator: string;
  tokenHolder: string;
  0: string;
  1: string;
}>;
export type Sent = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  amount: string;
  data: string;
  operatorData: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ERC777 extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ERC777;
  clone(): ERC777;
  methods: {
    allowance(
      holder: string,
      spender: string
    ): NonPayableTransactionObject<string>;

    approve(
      spender: string,
      value: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    authorizeOperator(operator: string): NonPayableTransactionObject<void>;

    balanceOf(tokenHolder: string): NonPayableTransactionObject<string>;

    burn(
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    decimals(): NonPayableTransactionObject<string>;

    defaultOperators(): NonPayableTransactionObject<string[]>;

    granularity(): NonPayableTransactionObject<string>;

    isOperatorFor(
      operator: string,
      tokenHolder: string
    ): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    operatorBurn(
      account: string,
      amount: number | string | BN,
      data: string | number[],
      operatorData: string | number[]
    ): NonPayableTransactionObject<void>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: number | string | BN,
      data: string | number[],
      operatorData: string | number[]
    ): NonPayableTransactionObject<void>;

    revokeOperator(operator: string): NonPayableTransactionObject<void>;

    send(
      recipient: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    symbol(): NonPayableTransactionObject<string>;

    totalSupply(): NonPayableTransactionObject<string>;

    transfer(
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    AuthorizedOperator(cb?: Callback<AuthorizedOperator>): EventEmitter;
    AuthorizedOperator(
      options?: EventOptions,
      cb?: Callback<AuthorizedOperator>
    ): EventEmitter;

    Burned(cb?: Callback<Burned>): EventEmitter;
    Burned(options?: EventOptions, cb?: Callback<Burned>): EventEmitter;

    Minted(cb?: Callback<Minted>): EventEmitter;
    Minted(options?: EventOptions, cb?: Callback<Minted>): EventEmitter;

    RevokedOperator(cb?: Callback<RevokedOperator>): EventEmitter;
    RevokedOperator(
      options?: EventOptions,
      cb?: Callback<RevokedOperator>
    ): EventEmitter;

    Sent(cb?: Callback<Sent>): EventEmitter;
    Sent(options?: EventOptions, cb?: Callback<Sent>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "AuthorizedOperator", cb: Callback<AuthorizedOperator>): void;
  once(
    event: "AuthorizedOperator",
    options: EventOptions,
    cb: Callback<AuthorizedOperator>
  ): void;

  once(event: "Burned", cb: Callback<Burned>): void;
  once(event: "Burned", options: EventOptions, cb: Callback<Burned>): void;

  once(event: "Minted", cb: Callback<Minted>): void;
  once(event: "Minted", options: EventOptions, cb: Callback<Minted>): void;

  once(event: "RevokedOperator", cb: Callback<RevokedOperator>): void;
  once(
    event: "RevokedOperator",
    options: EventOptions,
    cb: Callback<RevokedOperator>
  ): void;

  once(event: "Sent", cb: Callback<Sent>): void;
  once(event: "Sent", options: EventOptions, cb: Callback<Sent>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;
}
