/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ERC20PaymentReleased = ContractEventLog<{
  token: string;
  to: string;
  amount: string;
  0: string;
  1: string;
  2: string;
}>;
export type PayeeAdded = ContractEventLog<{
  account: string;
  shares: string;
  0: string;
  1: string;
}>;
export type PaymentReceived = ContractEventLog<{
  from: string;
  amount: string;
  0: string;
  1: string;
}>;
export type PaymentReleased = ContractEventLog<{
  to: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface PaymentSplitter extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): PaymentSplitter;
  clone(): PaymentSplitter;
  methods: {
    payee(index: number | string | BN): NonPayableTransactionObject<string>;

    "releasable(address)"(account: string): NonPayableTransactionObject<string>;

    "releasable(address,address)"(
      token: string,
      account: string
    ): NonPayableTransactionObject<string>;

    "release(address)"(account: string): NonPayableTransactionObject<void>;

    "release(address,address)"(
      token: string,
      account: string
    ): NonPayableTransactionObject<void>;

    "released(address,address)"(
      token: string,
      account: string
    ): NonPayableTransactionObject<string>;

    "released(address)"(account: string): NonPayableTransactionObject<string>;

    shares(account: string): NonPayableTransactionObject<string>;

    "totalReleased(address)"(
      token: string
    ): NonPayableTransactionObject<string>;

    "totalReleased()"(): NonPayableTransactionObject<string>;

    totalShares(): NonPayableTransactionObject<string>;
  };
  events: {
    ERC20PaymentReleased(cb?: Callback<ERC20PaymentReleased>): EventEmitter;
    ERC20PaymentReleased(
      options?: EventOptions,
      cb?: Callback<ERC20PaymentReleased>
    ): EventEmitter;

    PayeeAdded(cb?: Callback<PayeeAdded>): EventEmitter;
    PayeeAdded(options?: EventOptions, cb?: Callback<PayeeAdded>): EventEmitter;

    PaymentReceived(cb?: Callback<PaymentReceived>): EventEmitter;
    PaymentReceived(
      options?: EventOptions,
      cb?: Callback<PaymentReceived>
    ): EventEmitter;

    PaymentReleased(cb?: Callback<PaymentReleased>): EventEmitter;
    PaymentReleased(
      options?: EventOptions,
      cb?: Callback<PaymentReleased>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ERC20PaymentReleased", cb: Callback<ERC20PaymentReleased>): void;
  once(
    event: "ERC20PaymentReleased",
    options: EventOptions,
    cb: Callback<ERC20PaymentReleased>
  ): void;

  once(event: "PayeeAdded", cb: Callback<PayeeAdded>): void;
  once(
    event: "PayeeAdded",
    options: EventOptions,
    cb: Callback<PayeeAdded>
  ): void;

  once(event: "PaymentReceived", cb: Callback<PaymentReceived>): void;
  once(
    event: "PaymentReceived",
    options: EventOptions,
    cb: Callback<PaymentReceived>
  ): void;

  once(event: "PaymentReleased", cb: Callback<PaymentReleased>): void;
  once(
    event: "PaymentReleased",
    options: EventOptions,
    cb: Callback<PaymentReleased>
  ): void;
}
