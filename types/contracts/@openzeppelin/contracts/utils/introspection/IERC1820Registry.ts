/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type InterfaceImplementerSet = ContractEventLog<{
  account: string;
  interfaceHash: string;
  implementer: string;
  0: string;
  1: string;
  2: string;
}>;
export type ManagerChanged = ContractEventLog<{
  account: string;
  newManager: string;
  0: string;
  1: string;
}>;

export interface IERC1820Registry extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IERC1820Registry;
  clone(): IERC1820Registry;
  methods: {
    getInterfaceImplementer(
      account: string,
      _interfaceHash: string | number[]
    ): NonPayableTransactionObject<string>;

    getManager(account: string): NonPayableTransactionObject<string>;

    implementsERC165Interface(
      account: string,
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    interfaceHash(interfaceName: string): NonPayableTransactionObject<string>;

    setInterfaceImplementer(
      account: string,
      _interfaceHash: string | number[],
      implementer: string
    ): NonPayableTransactionObject<void>;

    setManager(
      account: string,
      newManager: string
    ): NonPayableTransactionObject<void>;

    updateERC165Cache(
      account: string,
      interfaceId: string | number[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    InterfaceImplementerSet(
      cb?: Callback<InterfaceImplementerSet>
    ): EventEmitter;
    InterfaceImplementerSet(
      options?: EventOptions,
      cb?: Callback<InterfaceImplementerSet>
    ): EventEmitter;

    ManagerChanged(cb?: Callback<ManagerChanged>): EventEmitter;
    ManagerChanged(
      options?: EventOptions,
      cb?: Callback<ManagerChanged>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "InterfaceImplementerSet",
    cb: Callback<InterfaceImplementerSet>
  ): void;
  once(
    event: "InterfaceImplementerSet",
    options: EventOptions,
    cb: Callback<InterfaceImplementerSet>
  ): void;

  once(event: "ManagerChanged", cb: Callback<ManagerChanged>): void;
  once(
    event: "ManagerChanged",
    options: EventOptions,
    cb: Callback<ManagerChanged>
  ): void;
}
