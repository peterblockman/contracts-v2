/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposited = ContractEventLog<{
  payee: string;
  weiAmount: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RefundsClosed = ContractEventLog<{}>;
export type RefundsEnabled = ContractEventLog<{}>;
export type Withdrawn = ContractEventLog<{
  payee: string;
  weiAmount: string;
  0: string;
  1: string;
}>;

export interface RefundEscrow extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RefundEscrow;
  clone(): RefundEscrow;
  methods: {
    beneficiary(): NonPayableTransactionObject<string>;

    beneficiaryWithdraw(): NonPayableTransactionObject<void>;

    close(): NonPayableTransactionObject<void>;

    deposit(refundee: string): PayableTransactionObject<void>;

    depositsOf(payee: string): NonPayableTransactionObject<string>;

    enableRefunds(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    state(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    withdraw(payee: string): NonPayableTransactionObject<void>;

    withdrawalAllowed(arg0: string): NonPayableTransactionObject<boolean>;
  };
  events: {
    Deposited(cb?: Callback<Deposited>): EventEmitter;
    Deposited(options?: EventOptions, cb?: Callback<Deposited>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RefundsClosed(cb?: Callback<RefundsClosed>): EventEmitter;
    RefundsClosed(
      options?: EventOptions,
      cb?: Callback<RefundsClosed>
    ): EventEmitter;

    RefundsEnabled(cb?: Callback<RefundsEnabled>): EventEmitter;
    RefundsEnabled(
      options?: EventOptions,
      cb?: Callback<RefundsEnabled>
    ): EventEmitter;

    Withdrawn(cb?: Callback<Withdrawn>): EventEmitter;
    Withdrawn(options?: EventOptions, cb?: Callback<Withdrawn>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposited", cb: Callback<Deposited>): void;
  once(
    event: "Deposited",
    options: EventOptions,
    cb: Callback<Deposited>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RefundsClosed", cb: Callback<RefundsClosed>): void;
  once(
    event: "RefundsClosed",
    options: EventOptions,
    cb: Callback<RefundsClosed>
  ): void;

  once(event: "RefundsEnabled", cb: Callback<RefundsEnabled>): void;
  once(
    event: "RefundsEnabled",
    options: EventOptions,
    cb: Callback<RefundsEnabled>
  ): void;

  once(event: "Withdrawn", cb: Callback<Withdrawn>): void;
  once(
    event: "Withdrawn",
    options: EventOptions,
    cb: Callback<Withdrawn>
  ): void;
}
