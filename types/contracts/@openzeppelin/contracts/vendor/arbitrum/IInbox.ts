/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type InboxMessageDelivered = ContractEventLog<{
  messageNum: string;
  data: string;
  0: string;
  1: string;
}>;
export type InboxMessageDeliveredFromOrigin = ContractEventLog<{
  messageNum: string;
  0: string;
}>;

export interface IInbox extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IInbox;
  clone(): IInbox;
  methods: {
    bridge(): NonPayableTransactionObject<string>;

    createRetryableTicket(
      destAddr: string,
      arbTxCallValue: number | string | BN,
      maxSubmissionCost: number | string | BN,
      submissionRefundAddress: string,
      valueRefundAddress: string,
      maxGas: number | string | BN,
      gasPriceBid: number | string | BN,
      data: string | number[]
    ): PayableTransactionObject<string>;

    createRetryableTicketNoRefundAliasRewrite(
      destAddr: string,
      arbTxCallValue: number | string | BN,
      maxSubmissionCost: number | string | BN,
      submissionRefundAddress: string,
      valueRefundAddress: string,
      maxGas: number | string | BN,
      gasPriceBid: number | string | BN,
      data: string | number[]
    ): PayableTransactionObject<string>;

    depositEth(
      maxSubmissionCost: number | string | BN
    ): PayableTransactionObject<string>;

    pauseCreateRetryables(): NonPayableTransactionObject<void>;

    sendContractTransaction(
      maxGas: number | string | BN,
      gasPriceBid: number | string | BN,
      destAddr: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    sendL1FundedContractTransaction(
      maxGas: number | string | BN,
      gasPriceBid: number | string | BN,
      destAddr: string,
      data: string | number[]
    ): PayableTransactionObject<string>;

    sendL1FundedUnsignedTransaction(
      maxGas: number | string | BN,
      gasPriceBid: number | string | BN,
      nonce: number | string | BN,
      destAddr: string,
      data: string | number[]
    ): PayableTransactionObject<string>;

    sendL2Message(
      messageData: string | number[]
    ): NonPayableTransactionObject<string>;

    sendUnsignedTransaction(
      maxGas: number | string | BN,
      gasPriceBid: number | string | BN,
      nonce: number | string | BN,
      destAddr: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<string>;

    startRewriteAddress(): NonPayableTransactionObject<void>;

    stopRewriteAddress(): NonPayableTransactionObject<void>;

    unpauseCreateRetryables(): NonPayableTransactionObject<void>;
  };
  events: {
    InboxMessageDelivered(cb?: Callback<InboxMessageDelivered>): EventEmitter;
    InboxMessageDelivered(
      options?: EventOptions,
      cb?: Callback<InboxMessageDelivered>
    ): EventEmitter;

    InboxMessageDeliveredFromOrigin(
      cb?: Callback<InboxMessageDeliveredFromOrigin>
    ): EventEmitter;
    InboxMessageDeliveredFromOrigin(
      options?: EventOptions,
      cb?: Callback<InboxMessageDeliveredFromOrigin>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "InboxMessageDelivered",
    cb: Callback<InboxMessageDelivered>
  ): void;
  once(
    event: "InboxMessageDelivered",
    options: EventOptions,
    cb: Callback<InboxMessageDelivered>
  ): void;

  once(
    event: "InboxMessageDeliveredFromOrigin",
    cb: Callback<InboxMessageDeliveredFromOrigin>
  ): void;
  once(
    event: "InboxMessageDeliveredFromOrigin",
    options: EventOptions,
    cb: Callback<InboxMessageDeliveredFromOrigin>
  ): void;
}
