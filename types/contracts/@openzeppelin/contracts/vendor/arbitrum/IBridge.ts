/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BridgeCallTriggered = ContractEventLog<{
  outbox: string;
  destAddr: string;
  amount: string;
  data: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type InboxToggle = ContractEventLog<{
  inbox: string;
  enabled: boolean;
  0: string;
  1: boolean;
}>;
export type MessageDelivered = ContractEventLog<{
  messageIndex: string;
  beforeInboxAcc: string;
  inbox: string;
  kind: string;
  sender: string;
  messageDataHash: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type OutboxToggle = ContractEventLog<{
  outbox: string;
  enabled: boolean;
  0: string;
  1: boolean;
}>;

export interface IBridge extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IBridge;
  clone(): IBridge;
  methods: {
    activeOutbox(): NonPayableTransactionObject<string>;

    allowedInboxes(inbox: string): NonPayableTransactionObject<boolean>;

    allowedOutboxes(outbox: string): NonPayableTransactionObject<boolean>;

    deliverMessageToInbox(
      kind: number | string | BN,
      sender: string,
      messageDataHash: string | number[]
    ): PayableTransactionObject<string>;

    executeCall(
      destAddr: string,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    inboxAccs(index: number | string | BN): NonPayableTransactionObject<string>;

    messageCount(): NonPayableTransactionObject<string>;

    setInbox(
      inbox: string,
      enabled: boolean
    ): NonPayableTransactionObject<void>;

    setOutbox(
      inbox: string,
      enabled: boolean
    ): NonPayableTransactionObject<void>;
  };
  events: {
    BridgeCallTriggered(cb?: Callback<BridgeCallTriggered>): EventEmitter;
    BridgeCallTriggered(
      options?: EventOptions,
      cb?: Callback<BridgeCallTriggered>
    ): EventEmitter;

    InboxToggle(cb?: Callback<InboxToggle>): EventEmitter;
    InboxToggle(
      options?: EventOptions,
      cb?: Callback<InboxToggle>
    ): EventEmitter;

    MessageDelivered(cb?: Callback<MessageDelivered>): EventEmitter;
    MessageDelivered(
      options?: EventOptions,
      cb?: Callback<MessageDelivered>
    ): EventEmitter;

    OutboxToggle(cb?: Callback<OutboxToggle>): EventEmitter;
    OutboxToggle(
      options?: EventOptions,
      cb?: Callback<OutboxToggle>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BridgeCallTriggered", cb: Callback<BridgeCallTriggered>): void;
  once(
    event: "BridgeCallTriggered",
    options: EventOptions,
    cb: Callback<BridgeCallTriggered>
  ): void;

  once(event: "InboxToggle", cb: Callback<InboxToggle>): void;
  once(
    event: "InboxToggle",
    options: EventOptions,
    cb: Callback<InboxToggle>
  ): void;

  once(event: "MessageDelivered", cb: Callback<MessageDelivered>): void;
  once(
    event: "MessageDelivered",
    options: EventOptions,
    cb: Callback<MessageDelivered>
  ): void;

  once(event: "OutboxToggle", cb: Callback<OutboxToggle>): void;
  once(
    event: "OutboxToggle",
    options: EventOptions,
    cb: Callback<OutboxToggle>
  ): void;
}
