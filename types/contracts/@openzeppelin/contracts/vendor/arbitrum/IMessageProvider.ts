/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type InboxMessageDelivered = ContractEventLog<{
  messageNum: string;
  data: string;
  0: string;
  1: string;
}>;
export type InboxMessageDeliveredFromOrigin = ContractEventLog<{
  messageNum: string;
  0: string;
}>;

export interface IMessageProvider extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IMessageProvider;
  clone(): IMessageProvider;
  methods: {};
  events: {
    InboxMessageDelivered(cb?: Callback<InboxMessageDelivered>): EventEmitter;
    InboxMessageDelivered(
      options?: EventOptions,
      cb?: Callback<InboxMessageDelivered>
    ): EventEmitter;

    InboxMessageDeliveredFromOrigin(
      cb?: Callback<InboxMessageDeliveredFromOrigin>
    ): EventEmitter;
    InboxMessageDeliveredFromOrigin(
      options?: EventOptions,
      cb?: Callback<InboxMessageDeliveredFromOrigin>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "InboxMessageDelivered",
    cb: Callback<InboxMessageDelivered>
  ): void;
  once(
    event: "InboxMessageDelivered",
    options: EventOptions,
    cb: Callback<InboxMessageDelivered>
  ): void;

  once(
    event: "InboxMessageDeliveredFromOrigin",
    cb: Callback<InboxMessageDeliveredFromOrigin>
  ): void;
  once(
    event: "InboxMessageDeliveredFromOrigin",
    options: EventOptions,
    cb: Callback<InboxMessageDeliveredFromOrigin>
  ): void;
}
