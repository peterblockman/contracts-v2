/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OutBoxTransactionExecuted = ContractEventLog<{
  destAddr: string;
  l2Sender: string;
  outboxEntryIndex: string;
  transactionIndex: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OutboxEntryCreated = ContractEventLog<{
  batchNum: string;
  outboxEntryIndex: string;
  outputRoot: string;
  numInBatch: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface IOutbox extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IOutbox;
  clone(): IOutbox;
  methods: {
    l2ToL1BatchNum(): NonPayableTransactionObject<string>;

    l2ToL1Block(): NonPayableTransactionObject<string>;

    l2ToL1EthBlock(): NonPayableTransactionObject<string>;

    l2ToL1OutputId(): NonPayableTransactionObject<string>;

    l2ToL1Sender(): NonPayableTransactionObject<string>;

    l2ToL1Timestamp(): NonPayableTransactionObject<string>;

    outboxEntryExists(
      batchNum: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    processOutgoingMessages(
      sendsData: string | number[],
      sendLengths: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    OutBoxTransactionExecuted(
      cb?: Callback<OutBoxTransactionExecuted>
    ): EventEmitter;
    OutBoxTransactionExecuted(
      options?: EventOptions,
      cb?: Callback<OutBoxTransactionExecuted>
    ): EventEmitter;

    OutboxEntryCreated(cb?: Callback<OutboxEntryCreated>): EventEmitter;
    OutboxEntryCreated(
      options?: EventOptions,
      cb?: Callback<OutboxEntryCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "OutBoxTransactionExecuted",
    cb: Callback<OutBoxTransactionExecuted>
  ): void;
  once(
    event: "OutBoxTransactionExecuted",
    options: EventOptions,
    cb: Callback<OutBoxTransactionExecuted>
  ): void;

  once(event: "OutboxEntryCreated", cb: Callback<OutboxEntryCreated>): void;
  once(
    event: "OutboxEntryCreated",
    options: EventOptions,
    cb: Callback<OutboxEntryCreated>
  ): void;
}
