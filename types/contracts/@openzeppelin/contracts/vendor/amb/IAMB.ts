/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../../../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AffirmationCompleted = ContractEventLog<{
  sender: string;
  executor: string;
  messageId: string;
  status: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type RelayedMessage = ContractEventLog<{
  sender: string;
  executor: string;
  messageId: string;
  status: boolean;
  0: string;
  1: string;
  2: string;
  3: boolean;
}>;
export type UserRequestForAffirmation = ContractEventLog<{
  messageId: string;
  encodedData: string;
  0: string;
  1: string;
}>;
export type UserRequestForSignature = ContractEventLog<{
  messageId: string;
  encodedData: string;
  0: string;
  1: string;
}>;

export interface IAMB extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IAMB;
  clone(): IAMB;
  methods: {
    destinationChainId(): NonPayableTransactionObject<string>;

    failedMessageDataHash(
      _messageId: string | number[]
    ): NonPayableTransactionObject<string>;

    failedMessageReceiver(
      _messageId: string | number[]
    ): NonPayableTransactionObject<string>;

    failedMessageSender(
      _messageId: string | number[]
    ): NonPayableTransactionObject<string>;

    maxGasPerTx(): NonPayableTransactionObject<string>;

    messageCallStatus(
      _messageId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    messageId(): NonPayableTransactionObject<string>;

    messageSender(): NonPayableTransactionObject<string>;

    messageSourceChainId(): NonPayableTransactionObject<string>;

    requireToConfirmMessage(
      _contract: string,
      _data: string | number[],
      _gas: number | string | BN
    ): NonPayableTransactionObject<string>;

    requireToPassMessage(
      _contract: string,
      _data: string | number[],
      _gas: number | string | BN
    ): NonPayableTransactionObject<string>;

    sourceChainId(): NonPayableTransactionObject<string>;

    transactionHash(): NonPayableTransactionObject<string>;
  };
  events: {
    AffirmationCompleted(cb?: Callback<AffirmationCompleted>): EventEmitter;
    AffirmationCompleted(
      options?: EventOptions,
      cb?: Callback<AffirmationCompleted>
    ): EventEmitter;

    RelayedMessage(cb?: Callback<RelayedMessage>): EventEmitter;
    RelayedMessage(
      options?: EventOptions,
      cb?: Callback<RelayedMessage>
    ): EventEmitter;

    UserRequestForAffirmation(
      cb?: Callback<UserRequestForAffirmation>
    ): EventEmitter;
    UserRequestForAffirmation(
      options?: EventOptions,
      cb?: Callback<UserRequestForAffirmation>
    ): EventEmitter;

    UserRequestForSignature(
      cb?: Callback<UserRequestForSignature>
    ): EventEmitter;
    UserRequestForSignature(
      options?: EventOptions,
      cb?: Callback<UserRequestForSignature>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AffirmationCompleted", cb: Callback<AffirmationCompleted>): void;
  once(
    event: "AffirmationCompleted",
    options: EventOptions,
    cb: Callback<AffirmationCompleted>
  ): void;

  once(event: "RelayedMessage", cb: Callback<RelayedMessage>): void;
  once(
    event: "RelayedMessage",
    options: EventOptions,
    cb: Callback<RelayedMessage>
  ): void;

  once(
    event: "UserRequestForAffirmation",
    cb: Callback<UserRequestForAffirmation>
  ): void;
  once(
    event: "UserRequestForAffirmation",
    options: EventOptions,
    cb: Callback<UserRequestForAffirmation>
  ): void;

  once(
    event: "UserRequestForSignature",
    cb: Callback<UserRequestForSignature>
  ): void;
  once(
    event: "UserRequestForSignature",
    options: EventOptions,
    cb: Callback<UserRequestForSignature>
  ): void;
}
